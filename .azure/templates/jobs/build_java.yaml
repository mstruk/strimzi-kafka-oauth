jobs:
  - job: 'build_and_test_java'
    displayName: 'Build & Test'
    # Strategy for the job
    strategy:
      matrix:
        'java-11':
          image: 'Ubuntu-22.04'
          jdk_version: '11'
          main_build: 'true'
        'java-17':
          image: 'Ubuntu-22.04'
          jdk_version: '17'
          main_build: 'false'
    # Set timeout for jobs
    timeoutInMinutes: 60
    # Base system
    pool:
      vmImage: $(image)
    # Variables
    variables:
      MVN_CACHE_FOLDER: $(HOME)/.m2/repository
      MVN_ARGS: '-e -V -B'
      MVN_EXTRA_ARGS: '--no-transfer-progress'
    # Pipeline steps
    steps:
      # Get cached Maven repository
      - template: "../steps/maven_cache.yaml"
      - template: '../steps/prerequisites/install_java.yaml'
        parameters:
          JDK_VERSION: $(jdk_version)
      - bash: "mvn ${MVN_ARGS} install"
        displayName: "Build & Test Java"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          TESTCONTAINERS_RYUK_DISABLED: "TRUE"
          TESTCONTAINERS_CHECKS_DISABLE: "TRUE"
      - bash: "mvn ${MVN_ARGS} spotbugs:check"
        displayName: "Spotbugs"
      - bash: "mvn ${MVN_ARGS} clean install -f examples/docker ${MVN_EXTRA_ARGS}"
        displayName: "Test Examples"
      - bash: |
          cd examples/docker
          ./spring/test-spring.sh
        displayName: "Test Spring Example"
        condition: and(succeeded(), eq(variables['jdk_version'], '17'))
      - bash: |
          echo "127.0.0.1 keycloak" | sudo tee -a /etc/hosts
          echo "127.0.0.1 hydra" | sudo tee -a /etc/hosts
          echo "127.0.0.1 hydra-jwt" | sudo tee -a /etc/hosts
          echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts
          echo "127.0.0.1 mockoauth" | sudo tee -a /etc/hosts
          echo "127.0.0.1 kerberos" | sudo tee -a /etc/hosts
          echo "Modified /etc/hosts:"
          cat /etc/hosts
        displayName: "Modify /etc/hosts"
      - script: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        displayName: 'Install Docker Compose'
      - bash: "mvn ${MVN_ARGS} test-compile spotbugs:check -f testsuite"
        displayName: "Testsuite Compile & Spotbugs"
      - bash: "mvn ${MVN_ARGS} install -f testsuite ${MVN_EXTRA_ARGS}"
        displayName: "Testsuite Run"
        condition: succeeded()
      # We have to TAR the target directory to maintain the permissions of
      # the files which would otherwise change when downloading the artifact
      - bash: tar -cvpf target.tar ./target
        displayName: "Tar the target directory"
        condition: and(succeeded(), eq(variables['main_build'], 'true'))
      - publish: $(System.DefaultWorkingDirectory)/target.tar
        artifact: Binary
        condition: and(succeeded(), eq(variables['main_build'], 'true'))
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: "Unit & Integration tests"
        condition: always()